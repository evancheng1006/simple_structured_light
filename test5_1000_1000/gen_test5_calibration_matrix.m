camera_res_w = 1000;
camera_res_h = 1000;
camera_fov_deg_w = 53.1301024;
camera_fov_deg_h = 53.1301024;
projector_res_w = 256;
projector_res_h = 256;
projector_fov_deg_w = 11.42;
projector_fov_deg_h = 11.42;
fn = 'calibration_parameters.mat';

camera_extrinsic_matrix = [ ...
1,   0,   0,   0; ...
0,   1,   0,   0; ...
0,   0,  -1,  10; ...
0,   0,   0,   1
];
camera_extrinsic_matrix = inv(camera_extrinsic_matrix);
camera_extrinsic_matrix = camera_extrinsic_matrix(1:3,:);

projector_extrinsic_matrix = [ ...
1,   0,   0,   0; ...
0,   1,   0,   0; ...
0,   0,  -1,   0; ...
0,   0,   0,   1  ...
];

projector_extrinsic_matrix = [ ...
1,   0,   0,   0; ...
0,   1,   0,   0; ...
0,   0,   1,  25; ...
0,   0,   0,   1  ...
] * projector_extrinsic_matrix;

projector_extrinsic_matrix = [ ...
1,                 0,                0,   0; ...
0,     0.86602540378,             -0.5,   0; ...
0,               0.5,    0.86602540378,   0; ...
0,                 0,                0,   1  ...
] * projector_extrinsic_matrix;

projector_extrinsic_matrix = [ ...
 0.707106781,    0,    0.707106781,    0; ...
           0,    1,              0,    0; ...
-0.707106781,    0,    0.707106781,    0; ...
           0,    0,              0,    1  ...
] * projector_extrinsic_matrix;

projector_extrinsic_matrix = inv(projector_extrinsic_matrix);
projector_extrinsic_matrix = projector_extrinsic_matrix(1:3,:);

camera_w = 2 * tan(camera_fov_deg_w * pi / 360.0);
camera_h = 2 * tan(camera_fov_deg_h * pi / 360.0);
    camera_flip_y = [ ...
    1,  0, 0; ...
    0, -1, 0; ...
    0,  0, 1; ...
    ];
camera_intrinsic_matrix = [ ...
    camera_res_w/camera_w,                     0, (camera_res_w+1)*0.5; ...
                        0, camera_res_h/camera_h, (camera_res_h+1)*0.5; ...
                        0,                     0,                     1 ...
    ] * camera_flip_y;


projector_w = 2 * tan(projector_fov_deg_w * pi / 360.0);
projector_h = 2 * tan(projector_fov_deg_h * pi / 360.0);
projector_intrinsic_matrix = [ ...
    projector_res_w/projector_w,                     0, (projector_res_w+1)*0.5; ...
                        0, projector_res_h/projector_h, (projector_res_h+1)*0.5; ...
                        0,                     0,                     1 ...
    ];

save(fn,'projector_intrinsic_matrix', ...
        'projector_extrinsic_matrix', ...
        'camera_intrinsic_matrix', ...
        'camera_extrinsic_matrix')